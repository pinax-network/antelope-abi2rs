// Generated by antelope-abi2rs 0.4.0 - eosio::abi/1.2

use serde::{Deserialize, Deserializer, Serialize};

type Asset = String;
type Name = String;
type Bool = bool;
type Bytes = String;
type Checksum256 = String;
type PublicKey = String;
type Symbol = String;
type TimePoint = String;
type TimePointSec = String;
type BlockTimestampType = String;
type Int64 = i64;
type Uint8 = u8;
type Uint16 = u16;
type Uint32 = u32;
type Varuint32 = u32;
type Uint64 = u64;
type Uint128 = String;
type Float64 = String;

fn str_or_i64<'de, D>(deserializer: D) -> Result<i64, D::Error>
where
    D: Deserializer<'de>,
{
    #[derive(Deserialize)]
    #[serde(untagged)]
    enum StrOrI64<'a> {
        Str(&'a str),
        I64(i64),
    }

    Ok(match StrOrI64::deserialize(deserializer)? {
        StrOrI64::Str(v) => v
            .parse::<i64>()
            .map_err(|_| serde::de::Error::custom("failed to parse i64 number"))?,
        StrOrI64::I64(v) => v,
    })
}

fn str_or_u64<'de, D>(deserializer: D) -> Result<u64, D::Error>
where
    D: Deserializer<'de>,
{
    #[derive(Deserialize)]
    #[serde(untagged)]
    enum StrOrU64<'a> {
        Str(&'a str),
        U64(u64),
    }

    Ok(match StrOrU64::deserialize(deserializer)? {
        StrOrU64::Str(v) => v
            .parse::<u64>()
            .map_err(|_| serde::de::Error::custom("failed to parse u64 number"))?,
        StrOrU64::U64(v) => v,
    })
}

macro_rules! impl_try_from_str {
    ($type:ty) => {
        impl TryFrom<&str> for $type {
            type Error = serde_json::Error;
            #[inline]
            fn try_from(str: &str) -> Result<Self, Self::Error> {
                serde_json::from_str(str)
            }
        }
    };
}
type BlockSigningAuthority = VariantBlockSigningAuthorityV0;
type BlockchainParametersT = BlockchainParametersV1;

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct AbiHash {
    pub owner: Name,
    pub hash: Checksum256,
}
impl_try_from_str!(AbiHash);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Activate {
    pub feature_digest: Checksum256,
}
impl_try_from_str!(Activate);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Authority {
    pub threshold: Uint32,
    pub keys: Vec<KeyWeight>,
    pub accounts: Vec<PermissionLevelWeight>,
    pub waits: Vec<WaitWeight>,
}
impl_try_from_str!(Authority);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct BidRefund {
    pub bidder: Name,
    pub amount: Asset,
}
impl_try_from_str!(BidRefund);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Bidname {
    pub bidder: Name,
    pub newname: Name,
    pub bid: Asset,
}
impl_try_from_str!(Bidname);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Bidrefund {
    pub bidder: Name,
    pub newname: Name,
}
impl_try_from_str!(Bidrefund);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct BlockHeader {
    pub timestamp: Uint32,
    pub producer: Name,
    pub confirmed: Uint16,
    pub previous: Checksum256,
    pub transaction_mroot: Checksum256,
    pub action_mroot: Checksum256,
    pub schedule_version: Uint32,
    pub new_producers: Option<ProducerSchedule>,
}
impl_try_from_str!(BlockHeader);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct BlockInfoRecord {
    pub version: Uint8,
    pub block_height: Uint32,
    pub block_timestamp: TimePoint,
}
impl_try_from_str!(BlockInfoRecord);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct BlockSigningAuthorityV0 {
    pub threshold: Uint32,
    pub keys: Vec<KeyWeight>,
}
impl_try_from_str!(BlockSigningAuthorityV0);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct BlockchainParameters {
    #[serde(deserialize_with = "str_or_u64")]
    pub max_block_net_usage: Uint64,
    pub target_block_net_usage_pct: Uint32,
    pub max_transaction_net_usage: Uint32,
    pub base_per_transaction_net_usage: Uint32,
    pub net_usage_leeway: Uint32,
    pub context_free_discount_net_usage_num: Uint32,
    pub context_free_discount_net_usage_den: Uint32,
    pub max_block_cpu_usage: Uint32,
    pub target_block_cpu_usage_pct: Uint32,
    pub max_transaction_cpu_usage: Uint32,
    pub min_transaction_cpu_usage: Uint32,
    pub max_transaction_lifetime: Uint32,
    pub deferred_trx_expiration_window: Uint32,
    pub max_transaction_delay: Uint32,
    pub max_inline_action_size: Uint32,
    pub max_inline_action_depth: Uint16,
    pub max_authority_depth: Uint16,
}
impl_try_from_str!(BlockchainParameters);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Buyram {
    pub payer: Name,
    pub receiver: Name,
    pub quant: Asset,
}
impl_try_from_str!(Buyram);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Buyrambytes {
    pub payer: Name,
    pub receiver: Name,
    pub bytes: Uint32,
}
impl_try_from_str!(Buyrambytes);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Buyrex {
    pub from: Name,
    pub amount: Asset,
}
impl_try_from_str!(Buyrex);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Canceldelay {
    pub canceling_auth: PermissionLevel,
    pub trx_id: Checksum256,
}
impl_try_from_str!(Canceldelay);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Cfgpowerup {
    pub args: PowerupConfig,
}
impl_try_from_str!(Cfgpowerup);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Claimrewards {
    pub owner: Name,
}
impl_try_from_str!(Claimrewards);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Closerex {
    pub owner: Name,
}
impl_try_from_str!(Closerex);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Cnclrexorder {
    pub owner: Name,
}
impl_try_from_str!(Cnclrexorder);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Connector {
    pub balance: Asset,
    pub weight: Float64,
}
impl_try_from_str!(Connector);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Consolidate {
    pub owner: Name,
}
impl_try_from_str!(Consolidate);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Defcpuloan {
    pub from: Name,
    #[serde(deserialize_with = "str_or_u64")]
    pub loan_num: Uint64,
    pub amount: Asset,
}
impl_try_from_str!(Defcpuloan);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Defnetloan {
    pub from: Name,
    #[serde(deserialize_with = "str_or_u64")]
    pub loan_num: Uint64,
    pub amount: Asset,
}
impl_try_from_str!(Defnetloan);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Delegatebw {
    pub from: Name,
    pub receiver: Name,
    pub stake_net_quantity: Asset,
    pub stake_cpu_quantity: Asset,
    pub transfer: Bool,
}
impl_try_from_str!(Delegatebw);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct DelegatedBandwidth {
    pub from: Name,
    pub to: Name,
    pub net_weight: Asset,
    pub cpu_weight: Asset,
}
impl_try_from_str!(DelegatedBandwidth);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Deleteauth {
    pub account: Name,
    pub permission: Name,
    pub authorized_by: Option<Name>,
}
impl_try_from_str!(Deleteauth);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Deposit {
    pub owner: Name,
    pub amount: Asset,
}
impl_try_from_str!(Deposit);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct EosioGlobalState2 {
    pub new_ram_per_block: Uint16,
    pub last_ram_increase: BlockTimestampType,
    pub last_block_num: BlockTimestampType,
    pub total_producer_votepay_share: Float64,
    pub revision: Uint8,
}
impl_try_from_str!(EosioGlobalState2);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct EosioGlobalState3 {
    pub last_vpay_state_update: TimePoint,
    pub total_vpay_share_change_rate: Float64,
}
impl_try_from_str!(EosioGlobalState3);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct EosioGlobalState4 {
    pub continuous_rate: Float64,
    #[serde(deserialize_with = "str_or_i64")]
    pub inflation_pay_factor: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub votepay_factor: Int64,
}
impl_try_from_str!(EosioGlobalState4);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct ExchangeState {
    pub supply: Asset,
    pub base: Connector,
    pub quote: Connector,
}
impl_try_from_str!(ExchangeState);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Fundcpuloan {
    pub from: Name,
    #[serde(deserialize_with = "str_or_u64")]
    pub loan_num: Uint64,
    pub payment: Asset,
}
impl_try_from_str!(Fundcpuloan);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Fundnetloan {
    pub from: Name,
    #[serde(deserialize_with = "str_or_u64")]
    pub loan_num: Uint64,
    pub payment: Asset,
}
impl_try_from_str!(Fundnetloan);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Init {
    pub version: Varuint32,
    pub core: Symbol,
}
impl_try_from_str!(Init);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct KeyWeight {
    pub key: PublicKey,
    pub weight: Uint16,
}
impl_try_from_str!(KeyWeight);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Limitauthchg {
    pub account: Name,
    pub allow_perms: Vec<Name>,
    pub disallow_perms: Vec<Name>,
}
impl_try_from_str!(Limitauthchg);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Linkauth {
    pub account: Name,
    pub code: Name,
    pub r#type: Name,
    pub requirement: Name,
    pub authorized_by: Option<Name>,
}
impl_try_from_str!(Linkauth);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Mvfrsavings {
    pub owner: Name,
    pub rex: Asset,
}
impl_try_from_str!(Mvfrsavings);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Mvtosavings {
    pub owner: Name,
    pub rex: Asset,
}
impl_try_from_str!(Mvtosavings);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct NameBid {
    pub newname: Name,
    pub high_bidder: Name,
    #[serde(deserialize_with = "str_or_i64")]
    pub high_bid: Int64,
    pub last_bid_time: TimePoint,
}
impl_try_from_str!(NameBid);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Newaccount {
    pub creator: Name,
    pub name: Name,
    pub owner: Authority,
    pub active: Authority,
}
impl_try_from_str!(Newaccount);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Onblock {
    pub header: BlockHeader,
}
impl_try_from_str!(Onblock);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Onerror {
    pub sender_id: Uint128,
    pub sent_trx: Bytes,
}
impl_try_from_str!(Onerror);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PairTimePointSecInt64 {
    pub first: TimePointSec,
    #[serde(deserialize_with = "str_or_i64")]
    pub second: Int64,
}
impl_try_from_str!(PairTimePointSecInt64);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PermissionLevel {
    pub actor: Name,
    pub permission: Name,
}
impl_try_from_str!(PermissionLevel);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PermissionLevelWeight {
    pub permission: PermissionLevel,
    pub weight: Uint16,
}
impl_try_from_str!(PermissionLevelWeight);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Powerup {
    pub payer: Name,
    pub receiver: Name,
    pub days: Uint32,
    #[serde(deserialize_with = "str_or_i64")]
    pub net_frac: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub cpu_frac: Int64,
    pub max_payment: Asset,
}
impl_try_from_str!(Powerup);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PowerupConfig {
    pub net: PowerupConfigResource,
    pub cpu: PowerupConfigResource,
    pub powerup_days: Option<Uint32>,
    pub min_powerup_fee: Option<Asset>,
}
impl_try_from_str!(PowerupConfig);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PowerupConfigResource {
    pub current_weight_ratio: Option<Int64>,
    pub target_weight_ratio: Option<Int64>,
    pub assumed_stake_weight: Option<Int64>,
    pub target_timestamp: Option<TimePointSec>,
    pub exponent: Option<Float64>,
    pub decay_secs: Option<Uint32>,
    pub min_price: Option<Asset>,
    pub max_price: Option<Asset>,
}
impl_try_from_str!(PowerupConfigResource);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PowerupOrder {
    pub version: Uint8,
    #[serde(deserialize_with = "str_or_u64")]
    pub id: Uint64,
    pub owner: Name,
    #[serde(deserialize_with = "str_or_i64")]
    pub net_weight: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub cpu_weight: Int64,
    pub expires: TimePointSec,
}
impl_try_from_str!(PowerupOrder);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PowerupState {
    pub version: Uint8,
    pub net: PowerupStateResource,
    pub cpu: PowerupStateResource,
    pub powerup_days: Uint32,
    pub min_powerup_fee: Asset,
}
impl_try_from_str!(PowerupState);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct PowerupStateResource {
    pub version: Uint8,
    #[serde(deserialize_with = "str_or_i64")]
    pub weight: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub weight_ratio: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub assumed_stake_weight: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub initial_weight_ratio: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub target_weight_ratio: Int64,
    pub initial_timestamp: TimePointSec,
    pub target_timestamp: TimePointSec,
    pub exponent: Float64,
    pub decay_secs: Uint32,
    pub min_price: Asset,
    pub max_price: Asset,
    #[serde(deserialize_with = "str_or_i64")]
    pub utilization: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub adjusted_utilization: Int64,
    pub utilization_timestamp: TimePointSec,
}
impl_try_from_str!(PowerupStateResource);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Powerupexec {
    pub user: Name,
    pub max: Uint16,
}
impl_try_from_str!(Powerupexec);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct ProducerInfo {
    pub owner: Name,
    pub total_votes: Float64,
    pub producer_key: PublicKey,
    pub is_active: Bool,
    pub url: String,
    pub unpaid_blocks: Uint32,
    pub last_claim_time: TimePoint,
    pub location: Uint16,
    pub producer_authority: Option<BlockSigningAuthority>,
}
impl_try_from_str!(ProducerInfo);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct ProducerInfo2 {
    pub owner: Name,
    pub votepay_share: Float64,
    pub last_votepay_share_update: TimePoint,
}
impl_try_from_str!(ProducerInfo2);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct ProducerKey {
    pub producer_name: Name,
    pub block_signing_key: PublicKey,
}
impl_try_from_str!(ProducerKey);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct ProducerSchedule {
    pub version: Uint32,
    pub producers: Vec<ProducerKey>,
}
impl_try_from_str!(ProducerSchedule);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Refund {
    pub owner: Name,
}
impl_try_from_str!(Refund);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RefundRequest {
    pub owner: Name,
    pub request_time: TimePointSec,
    pub net_amount: Asset,
    pub cpu_amount: Asset,
}
impl_try_from_str!(RefundRequest);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Regproducer {
    pub producer: Name,
    pub producer_key: PublicKey,
    pub url: String,
    pub location: Uint16,
}
impl_try_from_str!(Regproducer);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Regproducer2 {
    pub producer: Name,
    pub producer_authority: BlockSigningAuthority,
    pub url: String,
    pub location: Uint16,
}
impl_try_from_str!(Regproducer2);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Regproxy {
    pub proxy: Name,
    pub isproxy: Bool,
}
impl_try_from_str!(Regproxy);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Rentcpu {
    pub from: Name,
    pub receiver: Name,
    pub loan_payment: Asset,
    pub loan_fund: Asset,
}
impl_try_from_str!(Rentcpu);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Rentnet {
    pub from: Name,
    pub receiver: Name,
    pub loan_payment: Asset,
    pub loan_fund: Asset,
}
impl_try_from_str!(Rentnet);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexBalance {
    pub version: Uint8,
    pub owner: Name,
    pub vote_stake: Asset,
    pub rex_balance: Asset,
    #[serde(deserialize_with = "str_or_i64")]
    pub matured_rex: Int64,
    pub rex_maturities: Vec<PairTimePointSecInt64>,
}
impl_try_from_str!(RexBalance);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexFund {
    pub version: Uint8,
    pub owner: Name,
    pub balance: Asset,
}
impl_try_from_str!(RexFund);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexLoan {
    pub version: Uint8,
    pub from: Name,
    pub receiver: Name,
    pub payment: Asset,
    pub balance: Asset,
    pub total_staked: Asset,
    #[serde(deserialize_with = "str_or_u64")]
    pub loan_num: Uint64,
    pub expiration: TimePoint,
}
impl_try_from_str!(RexLoan);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexOrder {
    pub version: Uint8,
    pub owner: Name,
    pub rex_requested: Asset,
    pub proceeds: Asset,
    pub stake_change: Asset,
    pub order_time: TimePoint,
    pub is_open: Bool,
}
impl_try_from_str!(RexOrder);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexPool {
    pub version: Uint8,
    pub total_lent: Asset,
    pub total_unlent: Asset,
    pub total_rent: Asset,
    pub total_lendable: Asset,
    pub total_rex: Asset,
    pub namebid_proceeds: Asset,
    #[serde(deserialize_with = "str_or_u64")]
    pub loan_num: Uint64,
}
impl_try_from_str!(RexPool);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexReturnBuckets {
    pub version: Uint8,
    pub return_buckets: Vec<PairTimePointSecInt64>,
}
impl_try_from_str!(RexReturnBuckets);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct RexReturnPool {
    pub version: Uint8,
    pub last_dist_time: TimePointSec,
    pub pending_bucket_time: TimePointSec,
    pub oldest_bucket_time: TimePointSec,
    #[serde(deserialize_with = "str_or_i64")]
    pub pending_bucket_proceeds: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub current_rate_of_increase: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub proceeds: Int64,
}
impl_try_from_str!(RexReturnPool);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Rexexec {
    pub user: Name,
    pub max: Uint16,
}
impl_try_from_str!(Rexexec);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Rmvproducer {
    pub producer: Name,
}
impl_try_from_str!(Rmvproducer);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Sellram {
    pub account: Name,
    #[serde(deserialize_with = "str_or_i64")]
    pub bytes: Int64,
}
impl_try_from_str!(Sellram);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Sellrex {
    pub from: Name,
    pub rex: Asset,
}
impl_try_from_str!(Sellrex);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setabi {
    pub account: Name,
    pub abi: Bytes,
    pub memo: Option<String>,
}
impl_try_from_str!(Setabi);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setacctcpu {
    pub account: Name,
    pub cpu_weight: Option<Int64>,
}
impl_try_from_str!(Setacctcpu);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setacctnet {
    pub account: Name,
    pub net_weight: Option<Int64>,
}
impl_try_from_str!(Setacctnet);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setacctram {
    pub account: Name,
    pub ram_bytes: Option<Int64>,
}
impl_try_from_str!(Setacctram);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setalimits {
    pub account: Name,
    #[serde(deserialize_with = "str_or_i64")]
    pub ram_bytes: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub net_weight: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub cpu_weight: Int64,
}
impl_try_from_str!(Setalimits);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setcode {
    pub account: Name,
    pub vmtype: Uint8,
    pub vmversion: Uint8,
    pub code: Bytes,
    pub memo: Option<String>,
}
impl_try_from_str!(Setcode);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setinflation {
    #[serde(deserialize_with = "str_or_i64")]
    pub annual_rate: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub inflation_pay_factor: Int64,
    #[serde(deserialize_with = "str_or_i64")]
    pub votepay_factor: Int64,
}
impl_try_from_str!(Setinflation);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setparams {
    pub params: BlockchainParametersT,
}
impl_try_from_str!(Setparams);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setpriv {
    pub account: Name,
    pub is_priv: Uint8,
}
impl_try_from_str!(Setpriv);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setram {
    #[serde(deserialize_with = "str_or_u64")]
    pub max_ram_size: Uint64,
}
impl_try_from_str!(Setram);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setramrate {
    pub bytes_per_block: Uint16,
}
impl_try_from_str!(Setramrate);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setrex {
    pub balance: Asset,
}
impl_try_from_str!(Setrex);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Undelegatebw {
    pub from: Name,
    pub receiver: Name,
    pub unstake_net_quantity: Asset,
    pub unstake_cpu_quantity: Asset,
}
impl_try_from_str!(Undelegatebw);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Unlinkauth {
    pub account: Name,
    pub code: Name,
    pub r#type: Name,
    pub authorized_by: Option<Name>,
}
impl_try_from_str!(Unlinkauth);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Unregprod {
    pub producer: Name,
}
impl_try_from_str!(Unregprod);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Unstaketorex {
    pub owner: Name,
    pub receiver: Name,
    pub from_net: Asset,
    pub from_cpu: Asset,
}
impl_try_from_str!(Unstaketorex);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Updateauth {
    pub account: Name,
    pub permission: Name,
    pub parent: Name,
    pub auth: Authority,
    pub authorized_by: Option<Name>,
}
impl_try_from_str!(Updateauth);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Updaterex {
    pub owner: Name,
}
impl_try_from_str!(Updaterex);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Updtrevision {
    pub revision: Uint8,
}
impl_try_from_str!(Updtrevision);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct UserResources {
    pub owner: Name,
    pub net_weight: Asset,
    pub cpu_weight: Asset,
    #[serde(deserialize_with = "str_or_i64")]
    pub ram_bytes: Int64,
}
impl_try_from_str!(UserResources);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Voteproducer {
    pub voter: Name,
    pub proxy: Name,
    pub producers: Vec<Name>,
}
impl_try_from_str!(Voteproducer);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct VoterInfo {
    pub owner: Name,
    pub proxy: Name,
    pub producers: Vec<Name>,
    #[serde(deserialize_with = "str_or_i64")]
    pub staked: Int64,
    pub last_vote_weight: Float64,
    pub proxied_vote_weight: Float64,
    pub is_proxy: Bool,
    pub flags1: Uint32,
    pub reserved2: Uint32,
    pub reserved3: Asset,
}
impl_try_from_str!(VoterInfo);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Voteupdate {
    pub voter_name: Name,
}
impl_try_from_str!(Voteupdate);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct WaitWeight {
    pub wait_sec: Uint32,
    pub weight: Uint16,
}
impl_try_from_str!(WaitWeight);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Wasmcfg {
    pub settings: Name,
}
impl_try_from_str!(Wasmcfg);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Withdraw {
    pub owner: Name,
    pub amount: Asset,
}
impl_try_from_str!(Withdraw);

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct LimitAuthChange {
    pub version: Uint8,
    pub account: Name,
    pub allow_perms: Vec<Name>,
    pub disallow_perms: Vec<Name>,
}
impl_try_from_str!(LimitAuthChange);

