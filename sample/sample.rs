// Generated by antelope-abi2rs 0.3.0 - eosio::abi/1.1

use serde::{Deserialize, Serialize};

type Asset = String;
type Name = String;
type Checksum256 = String;
type Symbol = String;
type SymbolCode = String;
type TimePointSec = String;
type Uint16 = u16;
type Uint32 = u32;
type Uint64 = u64;
type Float64 = String;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct ExtendedAsset {
    pub quantity: Asset,
    pub contract: Name,
}

macro_rules! impl_try_from_str {
    ($type:ty) => {
        impl TryFrom<&str> for $type {
            type Error = serde_json::Error;
            #[inline]
            fn try_from(str: &str) -> Result<Self, Self::Error> {
                serde_json::from_str(str)
            }
        }
    };
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Cleartable {
    pub table_name: Name,
    pub round_id: Option<Uint16>,
    pub max_rows: Option<Uint64>,
}
impl_try_from_str!(Cleartable);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Collapse {
    pub user_ids: Vec<Name>,
    pub user_id: Name,
    pub round_id: Uint16,
}
impl_try_from_str!(Collapse);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct ContributionT {
    pub id: Name,
    pub value: Float64,
}
impl_try_from_str!(ContributionT);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Deltoken {
    pub symcode: SymbolCode,
}
impl_try_from_str!(Deltoken);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct GlobalsRow {
    pub season_id: Uint16,
    pub grant_fee: Uint64,
    pub bounty_fee: Uint64,
    pub login_contract: Name,
    pub fee_account: Name,
}
impl_try_from_str!(GlobalsRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct GrantsRow {
    pub id: Name,
    pub r#type: Name,
    pub author_user_id: Name,
    pub funding_account: Name,
    pub accepted_tokens: Vec<SymbolCode>,
    pub status: Name,
    pub created_at: TimePointSec,
    pub updated_at: TimePointSec,
}
impl_try_from_str!(GrantsRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Joinround {
    pub grant_id: Name,
    pub round_id: Uint16,
}
impl_try_from_str!(Joinround);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct MatchRow {
    pub grant_id: Name,
    pub round_id: Uint16,
    pub total_users: Uint64,
    pub sum_value: Float64,
    pub sum_boost: Float64,
    pub sum_sqrt: Float64,
    pub square: Float64,
    pub updated_at: TimePointSec,
}
impl_try_from_str!(MatchRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Removeuser {
    pub user_ids: Vec<Name>,
    pub round_id: Uint16,
}
impl_try_from_str!(Removeuser);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct RoundsRow {
    pub round_id: Uint16,
    pub description: String,
    pub season_id: Uint16,
    pub grant_ids: Vec<Name>,
    pub user_ids: Vec<Name>,
    pub donated_tokens: Vec<ExtendedAsset>,
    pub match_value: Float64,
    pub sum_value: Float64,
    pub sum_boost: Float64,
    pub sum_square: Float64,
    pub created_at: TimePointSec,
    pub updated_at: TimePointSec,
}
impl_try_from_str!(RoundsRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct SeasonsRow {
    pub season_id: Uint16,
    pub description: String,
    pub round_ids: Vec<Uint16>,
    pub match_value: Float64,
    pub start_at: TimePointSec,
    pub end_at: TimePointSec,
    pub submission_start_at: TimePointSec,
    pub submission_end_at: TimePointSec,
    pub created_at: TimePointSec,
    pub updated_at: TimePointSec,
}
impl_try_from_str!(SeasonsRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setconfig {
    pub season_id: Option<Uint16>,
    pub grant_fee: Option<Uint64>,
    pub bounty_fee: Option<Uint64>,
    pub login_contract: Option<Name>,
    pub fee_account: Option<Name>,
}
impl_try_from_str!(Setconfig);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setfunding {
    pub grant_id: Name,
    pub user_id: Name,
}
impl_try_from_str!(Setfunding);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setgrant {
    pub author_id: Name,
    pub project_id: Name,
    pub funding_account: Name,
    pub accepted_tokens: Vec<SymbolCode>,
}
impl_try_from_str!(Setgrant);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setgrantid {
    pub grant_id: Name,
    pub new_grant_id: Name,
}
impl_try_from_str!(Setgrantid);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setproject {
    pub author_id: Name,
    pub project_type: Name,
    pub project_id: Name,
    pub funding_account: Name,
    pub accepted_tokens: Vec<SymbolCode>,
}
impl_try_from_str!(Setproject);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setround {
    pub round_id: Uint16,
    pub season_id: Uint16,
    pub description: Option<String>,
    pub match_value: Option<Float64>,
}
impl_try_from_str!(Setround);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setseason {
    pub season_id: Uint16,
    pub start_at: Option<TimePointSec>,
    pub end_at: Option<TimePointSec>,
    pub submission_start_at: Option<TimePointSec>,
    pub submission_end_at: Option<TimePointSec>,
    pub description: Option<String>,
    pub match_value: Option<Float64>,
}
impl_try_from_str!(Setseason);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Setstate {
    pub project_id: Name,
    pub state: Name,
}
impl_try_from_str!(Setstate);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct StatusRow {
    pub counters: Vec<Uint32>,
    pub last_updated: TimePointSec,
}
impl_try_from_str!(StatusRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Token {
    pub sym: Symbol,
    pub contract: Name,
    pub min_amount: Uint64,
    pub oracle_id: Uint64,
}
impl_try_from_str!(Token);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct TokensRow {
    pub sym: Symbol,
    pub contract: Name,
    pub min_amount: Uint64,
    pub oracle_id: Uint64,
}
impl_try_from_str!(TokensRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct TransfersRow {
    pub transfer_id: Uint64,
    pub from: Name,
    pub to: Name,
    pub ext_quantity: ExtendedAsset,
    pub fee: Asset,
    pub memo: String,
    pub user_id: Name,
    pub season_id: Uint16,
    pub round_id: Uint16,
    pub project_type: Name,
    pub project_id: Name,
    pub value: Float64,
    pub trx_id: Checksum256,
    pub created_at: TimePointSec,
}
impl_try_from_str!(TransfersRow);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct Unjoinround {
    pub grant_id: Name,
    pub round_id: Uint16,
}
impl_try_from_str!(Unjoinround);

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(deny_unknown_fields)]
pub struct UsersRow {
    pub user_id: Name,
    pub multiplier: Float64,
    pub value: Float64,
    pub boost: Float64,
    pub contributions: Vec<ContributionT>,
    pub updated_at: TimePointSec,
}
impl_try_from_str!(UsersRow);
